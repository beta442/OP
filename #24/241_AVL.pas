PROGRAM TreeSort(INPUT, OUTPUT);
{ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –±–∏–Ω–∞—Ä–Ω—ã–º –¥–µ—Ä–µ–≤–æ–º }
TYPE 
  Tree = ^Node;
  Node = RECORD
            Key: CHAR;
            Balance,               //–†–∞–∑–Ω–æ—Å—Ç—å –≤—ã—Å–æ—Ç –ø–æ–¥–¥–µ—Ä–µ–≤—å–µ–≤
            BalanceLeft,           //–í—ã—Å–æ—Ç–∞ –ª–µ–≤–æ–≥–æ –ø–æ–¥–¥–µ—Ä–µ–≤–∞
            BalanceRight: INTEGER; //–í—ã—Å–æ—Ç–∞ –ø—Ä–∞–≤–æ–≥–æ –ø–æ–¥–¥–µ—Ä–µ–≤–∞
            Rotated: BOOLEAN;      //–ë—ã–ª –ª–∏ —Å–æ–≤–µ—Ä—à—ë–Ω –ø–æ–≤–æ—Ä–æ—Ç –≤–æ–∫—Ä—É–≥ —ç—Ç–æ–π —è—á–µ–π–∫–∏?
            Left, Right: Tree;
         END;

VAR
  Root: Tree;
  Ch: CHAR;

PROCEDURE DoRotate(VAR Ptr: Tree);
{ –í—Ä–∞—â–∞–µ—Ç –¥–µ—Ä–µ–≤–æ –≤ —Ä–∞–π–æ–Ω–µ Ptr->Node, –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∞—Ä—É—à–µ–Ω }
VAR
  SavedRoot: Tree;
BEGIN { DoBalance }
  SavedRoot := Ptr; 
  { –°–º–æ—Ç—Ä–∏ —Å—Ç–∞—Ç—å—é –Ω–∞ –≤–∏–∫–∏ –ø—Ä–æ 4 –≤—Ä–∞—â–µ–Ω–∏—è –ê–í–õ-–¥–µ—Ä–µ–≤–∞ }  
  IF (Ptr^.Right <> NIL) AND  { –õ–µ–≤–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ }
     (abs(Ptr^.Right^.Balance - Ptr^.BalanceLeft) = 2) AND (Ptr^.Right^.BalanceLeft <= Ptr^.Right^.BalanceRight)
  THEN
    BEGIN                                              
      WRITELN(' NOT BALANCED! NEEDS LEFT ROTATION! FOR: ',
                Ptr^.Key, ' ', Ptr^.BalanceLeft, ' ', Ptr^.BalanceRight);
      Ptr := SavedRoot^.Right;
      SavedRoot^.Right := Ptr^.Left;
      Ptr^.Left := SavedRoot
    END;  
    
  IF (Ptr^.Left <> NIL) AND  { –ü—Ä–∞–≤–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ }
     (abs(Ptr^.Left^.Balance - Ptr^.BalanceRight) = 2) AND (Ptr^.Left^.BalanceRight <= Ptr^.Left^.BalanceLeft)
  THEN
    BEGIN
      WRITELN(' NOT BALANCED! NEEDS RIGHT ROTATION! FOR: ',
                Ptr^.Key, ' ', Ptr^.BalanceLeft, ' ', Ptr^.BalanceRight);
      Ptr := SavedRoot^.Left;
      SavedRoot^.Left := Ptr^.Right;
      Ptr^.Right := SavedRoot                                       
    END;    
                        
  IF (Ptr^.Right <> NIL) AND (Ptr^.Right^.Left <> NIL) AND   { –õ–µ–≤–æ–µ –±–æ–ª—å—à–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ }
     (abs(Ptr^.Right^.Balance - Ptr^.BalanceLeft) = 2) AND
     (Ptr^.Right^.Left^.Balance > Ptr^.Right^.BalanceRight)
  THEN
    BEGIN
      WRITELN(' NOT BALANCED! NEEDS RIGHT-LEFT ROTATION! FOR: ', 
                Ptr^.Key, ' ', Ptr^.BalanceLeft, ' ', Ptr^.BalanceRight);     
      Ptr := SavedRoot^.Right^.Left;
      SavedRoot^.Right^.Left := Ptr^.Right;
      Ptr^.Right := SavedRoot^.Right;
      SavedRoot^.Right := Ptr^.Left;
      Ptr^.Left := SavedRoot
    END;  
    
  IF (Ptr^.Left <> NIL) AND (Ptr^.Left^.Right <> NIL)  AND  { –ü—Ä–∞–≤–æ–µ –±–æ–ª—å—à–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ }
     (abs(Ptr^.Left^.Balance - Ptr^.BalanceRight) = 2) AND
     (Ptr^.Left^.Right^.Balance > Ptr^.Left^.BalanceLeft)
  THEN
    BEGIN
      WRITELN(' NOT BALANCED! NEEDS LEFT-RIGHT ROTATION! FOR: ',
                Ptr^.Key, ' ', Ptr^.BalanceLeft, ' ', Ptr^.BalanceRight);     
      Ptr := SavedRoot^.Left^.Right;
      SavedRoot^.Left^.Right := Ptr^.Left;
      Ptr^.Left := SavedRoot^.Left;
      SavedRoot^.Left := Ptr^.Right;
      Ptr^.Right := SavedRoot                                           
    END; 
     
  WRITELN('HERE! ', Ptr^.Key);     
  //Ptr^.Balance := abs(Ptr^.BalanceLeft - Ptr^.BalanceRight);
  Ptr^.Rotated := TRUE;
  //WRITELN(' ROTATION IS DONE! ', Ptr^.Left^.Key, ' ', Ptr^.Key, ' ', Ptr^.Right^.Key)     
END; { DoBalance }
 
PROCEDURE Insert(VAR Ptr: Tree; Data: CHAR);          
BEGIN {Insert} 
  IF Ptr = NIL
  THEN
    BEGIN 
      NEW(Ptr);
      Ptr^.Key := Data;
      WRITELN(' DATA IS SET ', Data);
      Ptr^.Left := NIL;
      Ptr^.Right := NIL;
      Ptr^.Balance := 0;           { 0,-1,1 - –ø–æ–¥–¥–µ—Ä–µ–≤—å—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã, 
                                     –∫–∞–∫ —Ç–æ–ª—å–∫–æ 2 - –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ, Balance —Å–Ω–æ–≤–∞}
      Ptr^.BalanceLeft := -1;      {-1 = –ø–æ–¥–¥–µ—Ä–µ–≤–æ –ø—É—Å—Ç–æ, 0 = –≤ –ø–æ–¥–¥–µ—Ä–µ–≤–µ 
                                     1 —ç–ª–µ–º–µ–Ω—Ç, 1 = –≤ –ø–æ–¥–¥–µ—Ä–µ–≤–µ 2 —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ —Ç.–¥.}
      Ptr^.BalanceRight := -1;
      Ptr^.Rotated := FALSE      
    END
  ELSE
    BEGIN
      IF Ptr^.Key > Data
      THEN
        BEGIN
          Ptr^.BalanceLeft := Ptr^.BalanceLeft + 1;  {–Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ —Ç–æ—á–Ω–æ –∏–∑–≤–µ—Å
                                                      —Ç–Ω–æ: —É –∫–∞–∫–æ–≥–æ –ø–æ–¥–¥–µ—Ä–µ–≤–∞ —É–≤–µ–ª–∏—á–∏—Ç—Å—è –≤—ã—Å–æ—Ç–∞ –Ω–∞ 1 Ù˚‚Ù˚‚Ù˚‚}
          Ptr^.Balance := abs(Ptr^.BalanceLeft - Ptr^.BalanceRight);
          WRITELN(' Ptr -> ', Ptr^.Key, ' Balance: ', Ptr^.Balance);                                                      
          Insert(Ptr^.Left, Data);
        END  
      ELSE
        BEGIN
          Ptr^.BalanceRight := Ptr^.BalanceRight + 1;      
          Ptr^.Balance := abs(Ptr^.BalanceLeft - Ptr^.BalanceRight);
          WRITELN(' Ptr -> ', Ptr^.Key, ' Balance: ', Ptr^.Balance);                                                                
          Insert(Ptr^.Right, Data);
        END
    END; 
  //WRITELN(' Ptr -> ', Ptr^.Key, ' Balance: ', Ptr^.Balance); 
  //Ptr^.Balance := abs(Ptr^.BalanceLeft - Ptr^.BalanceRight);
  
  //WRITELN(' Ptr -> ', Ptr^.Key, ' Balance: ', Ptr^.Balance);
  IF (Ptr^.Balance > 1) AND NOT Ptr^.Rotated
  THEN
    DoRotate(Ptr);
  IF (Ptr^.Left <> NIL) AND (Ptr^.Left^.Rotated)
  THEN  
    BEGIN
      Ptr^.BalanceLeft := Ptr^.BalanceLeft - 1;
      Ptr^.Left^.Rotated := FALSE
    END;
  IF (Ptr^.Right <> NIL) AND (Ptr^.Right^.Rotated)
  THEN  
    BEGIN
      Ptr^.BalanceRight := Ptr^.BalanceRight - 1;
      Ptr^.Right^.Rotated := FALSE
    END;  
  //WRITELN(' FOR: ', Ptr^.Key, ' LeftBalance: ', Ptr^.BalanceLeft, ' RightBalance: ', Ptr^.BalanceRight);  
END;  {Insert}

PROCEDURE PrintTree(Ptr: Tree);
BEGIN {PrintTree}
  IF Ptr <> NIL
  THEN  
    BEGIN
      PrintTree(Ptr^.Left);
      WRITE(Ptr^.Key);
      PrintTree(Ptr^.Right);
    END
END;  {PrintTree} 
  
BEGIN { TreeSort }
  Root := NIL;
  WHILE NOT EOLN
  DO
    BEGIN
      READ(Ch);
      Insert(Root, Ch)
    END;  
  PrintTree(Root);
  WRITELN(' ', Root^.Balance, Root^.Left^.Balance, Root^.Right^.Balance);
  WRITELN
END. { TreeSort }
